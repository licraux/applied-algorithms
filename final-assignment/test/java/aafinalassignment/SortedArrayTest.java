/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aafinalassignment;

import org.junit.Test;

import aafinalassignment.part_1.SortedArray;

import static org.junit.Assert.*;

public class SortedArrayTest {

    ///////////////////////////////////////////////////////////////
    ///                     Constructor tests                   ///
    ///////////////////////////////////////////////////////////////

    @Test
    /**
     * Test construction of SortedArray with the alpha arg as the minimum possible
     * integer.
     */
    public void ConstructionTest01() {
        assertThrows(IllegalArgumentException.class, () -> {
            SortedArray x = new SortedArray(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, Integer.MIN_VALUE);
        });
    }

    @Test
    /**
     * Test construction of SortedArray with the alpha arg as maximum possible
     * integer.
     */
    public void ConstructionTest02() {
        assertThrows(IllegalArgumentException.class, () -> {
            SortedArray x = new SortedArray(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, Integer.MAX_VALUE);
        });

    }

    @Test
    /**
     * Test construction of SortedArray with the alpha arg as 0.
     */
    public void ConstructionTest03() {
        SortedArray x = new SortedArray(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, 0);
    }

    @Test
    /**
     * Test construction of SortedArray with the alpha arg as 0.5.
     */
    public void ConstructionTest04() {
        SortedArray x = new SortedArray(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, 0.5);
    }

    @Test
    /**
     * Test construction of SortedArray with the alpha arg as 1.
     */
    public void ConstructionTest05() {
        SortedArray x = new SortedArray(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, 1);
    }

    ///////////////////////////////////////////////////////////////
    ///                     Pred        tests                   ///
    ///////////////////////////////////////////////////////////////

    @Test
    /**
     * Test pred function with empty array.
     */
    public void PredTestWithNoElements() {
        assertThrows(IllegalArgumentException.class, () -> {
            SortedArray x = new SortedArray(new int[] {}, 0.5);
        });
    }

    @Test
    /**
     * Test pred function with an array containing negative and
     * positive integers.
     */
    public void PredTestWithNegativeIntegers() {
        SortedArray x = new SortedArray(new int[] { -10, -5, 0, 5, 10 }, 0.5);
        assertEquals(0, x.pred(1));
    }

    @Test
    /**
     * Test pred function with an array containing one element.
     */
    public void PredTestWithOneElement() {
        SortedArray x = new SortedArray(new int[] { 1 }, 0.5);
        assertEquals(1, x.pred(5));
    }

    @Test
    /**
     * Test pred function with the target value out of the range of
     * original array.
     */
    public void PredTestXOutOfRange() {
        SortedArray x = new SortedArray(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, 0.5);
        assertEquals(9, x.pred(20)); // 20 not in array.
    }

    @Test
    /**
     * Test pred function with an array containing duplicate values.
     */
    public void PredTestWithDuplicateValues() {
        SortedArray x = new SortedArray(new int[] { 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 }, 0.5);
        assertEquals(3, x.pred(3));
    }

    @Test
    /**
     * Test pred function with alpha arg at the boundaries.
     */
    public void PredTestAlphaAtBoundary() {
        SortedArray x = new SortedArray(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 1);
        assertEquals(5, x.pred(5));

        x = new SortedArray(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 0);
        assertEquals(5, x.pred(5));
    }

    @Test
    /**
     * Test pred function with varying sizes of arrays (1-101) and alpha set
     * to 0.5.
     */
    public void PredTestVaryingArraysAlpha05() {
        for (int i = 1; i <= 101; i++) {
            int[] arr = new int[i];
            for (int j = 0; j < i; j++) {
                arr[j] = j + 1;
            }

            SortedArray x = new SortedArray(arr, 0.5);

            if (i == 0) { // when array is empty, we return the min int value TODO: is this correct?
                assertEquals(Integer.MIN_VALUE, x.pred(5));
            } else if (i >= 5) { // when array is larger or equal to 5, we expect the result of pred to be 5
                assertEquals(5, x.pred(5));
            } else { // when array has less than 5 elements, we expect the result of pred to be the largest element in the array
                assertEquals(i, x.pred(5));
            }
        }
    }

    @Test
    /**
     * Test pred function with varying sizes of arrays (1-101) and alpha set
     * to 0.
     */
    public void PredTestVaryingArraysAlpha00() {
        for (int i = 1; i <= 101; i++) {
            int[] arr = new int[i];
            for (int j = 0; j < i; j++) {
                arr[j] = j + 1;
            }

            SortedArray x = new SortedArray(arr, 0.0);

            if (i == 0) { // when array is empty, we return the min int value
                assertEquals(Integer.MIN_VALUE, x.pred(5));
            } else if (i >= 5) { // when array is larger or equal to 5, we expect the result of pred to be 5
                assertEquals(5, x.pred(5));
            } else { // when array has less than 5 elements, we expect the result of pred to be the largest element in the array
                assertEquals(i, x.pred(5));
            }
        }
    }

    @Test
    /**
     * Test pred function with varying sizes of arrays (1-101) and alpha set
     * to 1.0.
     */
    public void PredTestVaryingArraysAlpha10() {
        for (int i = 1; i <= 101; i++) {
            int[] arr = new int[i];
            for (int j = 0; j < i; j++) {
                arr[j] = j + 1;
            }

            SortedArray x = new SortedArray(arr, 1.0);

            if (i == 0) { // when array is empty, we return the min int value
                assertEquals(Integer.MIN_VALUE, x.pred(5));
            } else if (i >= 5) { // when array is larger or equal to 5, we expect the result of pred to be 5
                assertEquals(5, x.pred(5));
            } else { // when array has less than 5 elements, we expect the result of pred to be the largest element in the array
                assertEquals(i, x.pred(5));
            }
        }
    }
}