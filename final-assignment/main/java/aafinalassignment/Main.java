/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aafinalassignment;

import aafinalassignment.part_1.OtherArray;
import aafinalassignment.part_1.SearchTree;
import aafinalassignment.part_1.SortedArray;
import aafinalassignment.experiment.*;
import aafinalassignment.benchmarking.Benchmark;

public class Main {

    public static void main(String[] args) {

        int n = 25000;
        int q = 1_000_000;
        int seed = 535235;
        ExperimentValueGenerator generator = new ExperimentValueGenerator(seed);
    
        int[] input = generator.createInput(n);
    
        int min = input[0];
        int max = input[0];
    
        // Iterate through the array
        for (int i = 1; i < input.length; i++) {
            if (input[i] > max)
                max = input[i]; // Update max
    
            else if (input[i] < min)
                min = input[i]; // Update min
        }
    
        int[] queries = generator.createQueries(q, min, max);
    
        // System.out.println("algorithm,n,alpha,time,sd,iterations");
    
        // // Loop for varying alpha values from 0.05 to 0.95
        // for (double alpha = 0.05; alpha <= 0.95; alpha += 0.05) {
    
        //     SortedArray x = new SortedArray(input, alpha);
        //     SearchTree y = new SearchTree(input, alpha);
        //     OtherArray z = new OtherArray(input, alpha);
    
        //     Benchmark.Mark7("SortedArray " + "n=" + n + "," + "alpha=" + alpha, i -> {
        //         for(int j = 0; j < queries.length; j++) {
        //             x.pred(queries[j]);
        //         }
        //         return 0.0;
        //     });
    
        //     Benchmark.Mark7("SearchTree " + "n=" + n + "," + " alpha=" + alpha, i -> {
        //         for (int j = 0; j < queries.length; j++) {
        //             y.pred(queries[j]);
        //         }
        //         return 0.0;
        //     });
    
        //     Benchmark.Mark7("OtherArray " + "n=" + n + "," + " alpha=" + alpha, i -> {
        //         for (int j = 0; j < queries.length; j++) {
        //             z.pred(queries[j]);
        //         }
        //         return 0.0;
        //     });
        // }
    }
    }
